<!-- 
    Sign up page, pretty much the same as login.
    -->
    {% extends 'base.jinja' %}
    
    
    {% block content %} 
        <h1>Sign Up</h1>
        <p>Username</p>
        <input id="username"/>
        <p>Password</p>
        <input id="password" type="password"/>
        <button onclick="signup()">Sign up</button>
    
        <script>
             function isValidURL(string) {
                if (string.length == 0) {
                    return false;
                }
                if (string[0] == "/") {
                    return true;
                }
                return false;
            }
    
            // this function is identical to login(), see login.jinja
            async function signup() {
                let keyPair = await window.crypto.subtle.generateKey(
                    {
                        name: "RSA-OAEP",
                        modulusLength: 2048,
                        publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
                        hash: {name: "SHA-256"},
                    },
                    true,
                    ["encrypt", "decrypt"]
                );
    
                let exportedPublicKey = await window.crypto.subtle.exportKey("spki", keyPair.publicKey);
                let publicKeyBase64 = btoa(String.fromCharCode.apply(null, new Uint8Array(exportedPublicKey)));
                let exportedPrivateKey = await window.crypto.subtle.exportKey("pkcs8", keyPair.privateKey);
                let privateKeyBase64 = btoa(String.fromCharCode.apply(null, new Uint8Array(exportedPrivateKey)));
    
                let username = $("#username").val();
                let password = $("#password").val();
    
                let encryptedPrivateKey = await encryptPrivateKey(privateKeyBase64, password, username);
                let encryptedPrivateKeyBase64 = btoa(String.fromCharCode.apply(null, new Uint8Array(encryptedPrivateKey)));
    
                Cookies.set("privateKey", privateKeyBase64);
                Cookies.set("password", password);
    
                let loginURL = "{{ url_for('signup_user') }}";
                let res = await axios.post(loginURL, {
                    username: username,
                    password: password,
                    publicKey: publicKeyBase64,
                    privateKey: encryptedPrivateKeyBase64
                });
                if (!isValidURL(res.data)) {
                    alert(res.data);
                    return;
                }
                window.open(res.data, "_self")
            }
<<<<<<< HEAD
            return false;
        }

        // this function is identical to login(), see login.jinja
        async function signup() {
            let keyPair = await window.crypto.subtle.generateKey(
                {
                    name: "RSA-OAEP",
                    modulusLength: 2048,
                    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
                    hash: {name: "SHA-256"},
                },
                true,
                ["encrypt", "decrypt"]
            );

            let exportedPublicKey = await window.crypto.subtle.exportKey("spki", keyPair.publicKey);
            let publicKeyBase64 = btoa(String.fromCharCode.apply(null, new Uint8Array(exportedPublicKey)));
            let exportedPrivateKey = await window.crypto.subtle.exportKey("pkcs8", keyPair.privateKey);
            let privateKeyBase64 = btoa(String.fromCharCode.apply(null, new Uint8Array(exportedPrivateKey)));

            let username = $("#username").val();
            let password = $("#password").val();

            let encryptedPrivateKey = await encryptPrivateKey(privateKeyBase64, password, username);
            let encryptedPrivateKeyBase64 = btoa(String.fromCharCode.apply(null, new Uint8Array(encryptedPrivateKey)));

            Cookies.set("privateKey", privateKeyBase64);
            Cookies.set("password", password);

            let loginURL = "{{ url_for('signup_user') }}";
            let res = await axios.post(loginURL, {
                username: username,
                password: password,
                publicKey: publicKeyBase64,
                privateKey: encryptedPrivateKeyBase64
            });
            if (!isValidURL(res.data)) {
                alert(res.data);
                return;
            }
            window.open(res.data, "_self")
        }

        async function encryptPrivateKey(privateKey, password, username) {
            const keyMaterial = await crypto.subtle.importKey(
                "raw",
                new TextEncoder().encode(password),
                {name: "PBKDF2"},
                false,
                ["deriveKey"]
            );

            const key = await crypto.subtle.deriveKey(
                {
                    "name": "PBKDF2",
                    salt: new TextEncoder().encode(username),
                    "iterations": 100000,
                    "hash": "SHA-256"
                },
                keyMaterial,
                { "name": "AES-GCM", "length": 256},
                true,
                [ "encrypt", "decrypt" ]
            );

            const iv = new Uint8Array(12);
            const encryptedPrivateKey = await crypto.subtle.encrypt(
                {
                    name: "AES-GCM",
                    iv: iv,
                },
                key,
                new TextEncoder().encode(privateKey)
            );

            return encryptedPrivateKey;
        }
    </script>
{% endblock %}
=======
    
            async function encryptPrivateKey(privateKey, password, username) {
                const keyMaterial = await crypto.subtle.importKey(
                    "raw",
                    new TextEncoder().encode(password),
                    {name: "PBKDF2"},
                    false,
                    ["deriveKey"]
                );
    
                const key = await crypto.subtle.deriveKey(
                    {
                        "name": "PBKDF2",
                        salt: new TextEncoder().encode(username),
                        "iterations": 100000,
                        "hash": "SHA-256"
                    },
                    keyMaterial,
                    { "name": "AES-GCM", "length": 256},
                    true,
                    [ "encrypt", "decrypt" ]
                );
    
                const iv = new Uint8Array(12);
                const encryptedPrivateKey = await crypto.subtle.encrypt(
                    {
                        name: "AES-GCM",
                        iv: iv,
                    },
                    key,
                    new TextEncoder().encode(privateKey)
                );
    
                return encryptedPrivateKey;
            }
        </script>
    {% endblock %}
>>>>>>> ac05e4f (mid)
