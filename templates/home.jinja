<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %} 
   <style>
    nav {
        border-bottom: 1px solid black;
        overflow: auto
    }

    #message_box {
        border: 1px solid black; 
        height: 400px; 
        width: 800px; 
        overflow: auto;
        padding: 2px;
    }

    .text  {
        margin-top: 2px;
        margin-bottom: 2px;
    }

    .sidebar {
        width: 20%;
        margin-left: 20px;
        padding: 10px;
        border-left: 1px solid #ccc;
        float: right;
        position: fixed;
        top: 100px;
        right: 10px;
    }
    .sidebar ul {
        list-style: none;
        padding: 0;
    }

    .sidebar ul li {
        margin-bottom: 10px;
    }

</style>

<div class="content-container">
    <main>
        <!--Navbar, you'll see the username here-->
        <nav style="border-bottom: 1px solid black;">
            <ol style="float: right">
                <li style="display:inline-block">Username:  {{ username }} </li>
            </ol>
        </nav>

        <h1>Messaging App </h1>

        <section id="message_box"></section>
        
        <section id="chat_box">
            <p class="text">Chat with: </p>
            <input id="receiver" placeholder="username">
            <!-- MDN says its bad practice to use the onclick attribute,
            but we're using it anyways coz its easy :)-->
            <button onclick="join_room()">Chat</button>
        </section>

        <!-- The (message) input box is set to display: none initially, 
        this means the input box is "invisible" initially-->
        <section id="input_box" style="display: none">
            <p class="text">Message: </p>
            <input id="message" placeholder="message" style="display:inline-block;min-width: 400px">
            <button onclick="send()">Send</button>
            <button onclick="leave()">Leave Room</button>
        </section>
    </main>
    <!-- Sidebar for friend list -->
    <aside class="sidebar">
        <h2>Friends</h2>
        {% if friends %}
            <ul>
            {% for friend in friends %}
                    <li>&DoubleRightArrow; {{ friend }}</li> 
            {% endfor %}
            </ul>
        {% else %}
            <p>No friends to show.</p>
        {% endif %}
    <div>
        <input id="friend_name" placeholder="Enter a friend name" style="margin-right: 5px"/><button onclick="add_friend()">Add friend</button>
    </div>
        <h2>Requests</h2>
        {% if requests %}
            <ul>
                {% for request in requests %}
                        <li>&DoubleRightArrow; {{ request }}</li> 
                        <button onclick="accept_friend('{{ request }}')">Accept</button>
                        <button onclick="reject_friend('{{ request }}')">Reject</button>
                {% endfor %}
            </ul>
        {% else %}
            <p>No request.</p>
        {% endif %}
    </div>
    </aside>
</div>

<script src="/static/js/libs/socket.io.min.js"></script>
<script>
    let room_id = 0;
    let receiver = '';

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
     $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })


    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
        receiver = Cookies.get("receiver");
    })

    let username = "{{ username }}";

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    socket.on("history", (user, msg, color, encrypted) => {
        load_old_message(user, msg, color, encrypted);
    });

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (user, msg, color="black", encrypted, signature="") => {
        add_message(user, msg, color, encrypted, signature);
        if (user === 'system' && msg === `${username} has left the room.`){
            clearMessage();
        }
        if (user === 'system' && msg === `${username} has left the room.`){
            clearMessage();
        }
    });
    
    // we'll send the message to the server by emitting a "send" event
    function send() {
        //console.log("send called"); //d
        let message = $("#message").val();
        $("#message").val("");
        receiver = Cookies.get("receiver");
        if (message !== ""){
            console.log("(In send) RequestPublickeyAndSend called: ", {room_id, username, message, receiver}) //d
            requestPublicKeyAndSend(username, receiver, message, room_id);
            add_message(username, message, "black", false);
        }else {
            console.log("(In send) message is empty, abondon");
        }
    } 

    async function add_friend() {
        let res = await axios.get("{{ url_for('add_friend') }}", {
            params: {
                friend_name: $("#friend_name").val(),
            }
        });
        alert(res.data)
    }

    async function accept_friend(friendName) {
        let res = await axios.get("{{ url_for('accept_friend') }}", {
            params: {
                friend_name: friendName,
            }
        });
        alert(res.data)
    }
    
    async function reject_friend(friendName) {
        let res = await axios.get("{{ url_for('reject_friend') }}", {
            params: {
                friend_name: friendName,
            }
        });
        alert(res.data)
    }

    // we emit a join room event to the server to join a room
    function join_room() {
        let receiver = $("#receiver").val();
        Cookies.set("receiver", receiver);
        console.log("(In join_room) join emitted with ", receiver);
        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("join", username, receiver, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                Cookies.remove("receiver");
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            
            Cookies.set("room_id", room_id);
            console.log("(In join_room) the server returns ", room_id)

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
        });
     
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        //Cookies.remove("receiver");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
    }
    
    function clearMessage(){
        console.log("(In clearMessage) message cleared");
        $("#message_box").empty(); 
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(user, message, color, encrypted, signature="") {
        console.log("(In add_message) Received: ", {user, message, color, encrypted, signature}); //d
        if (encrypted === false) {
            const text = `${user}: ${message}`;
            let box = $("#message_box");
            let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(text);
            box.append(child);
            if (user !== "system"){
                requestOwnPublickeyAndSave(user, message, color);
            }
        } else if (encrypted === true){
            if (user === username){
                ;
            } else if (user !== username){
                getPrivateKey(username)
                .then(priKeyBase64 => {
                    console.log("(In add message) private key get, use it to decrypt message: ", {priKeyBase64});
                    return decryptMessage(message, priKeyBase64);
                })
                .then(decryptedMessage => {
                    // check signature for integrity
                    return requestPublicKey_and_check_signature(decryptedMessage, signature, user)
                    .then(isValidSignature => {
                        let text;
                        let msgColor = "black";
                        if (isValidSignature) {
                            text = `${user}: ${decryptedMessage}`;
                            sendMessageForSave(user, message, color);
                        } else {
                            text = 'Message has been modified, please contact the admin immediately!';
                            msgColor = "red";
                        }
                        let box = $("#message_box");
                        let child = $(`<p style="color:${msgColor}; margin: 0px;"></p>`).text(text);
                        box.append(child);
                    });
                })
                .catch(error => {
                    text = 'Message has been modified, please contact the admin immediately!';
                    msgColor = "red";
                    let box = $("#message_box");
                    let child = $(`<p style="color:${msgColor}; margin: 0px;"></p>`).text(text);
                    box.append(child);

                    alert(text);
                });
            }
        }
    }

    function requestPublicKeyAndSend(username, receiver, message, room_id) {
        console.log("(In requestPublicKeyAndSend) get_public_key emitted with ", receiver)
        socket.emit('get_public_key_for_send', receiver);

        socket.once('public_key_response_for_send', function(data) {
            console.log("(In requestPublicKeyAndSend) Public key response received:", data); //d

            if (data.error) {
                console.error("Error getting public key:", data.error);
                return;
            }

            encryptAndSend(username, message, data.public_key, room_id);
        });
    }

    async function encryptAndSend(username, message, publicKeyStr, room_id) {
        try {
            let priKeyBase64 = await getPrivateKey(username);
            let sig = await produce_signature(message, priKeyBase64);

            const publicKey = await window.crypto.subtle.importKey(
                "spki",
                str2ab(publicKeyStr),
                {
                    name: "RSA-OAEP",
                    hash: {name: "SHA-256"},
                },
                true,
                ["encrypt"]
            );

            const encrypted = await window.crypto.subtle.encrypt(
                {
                    name: "RSA-OAEP",
                },
                publicKey,
                new TextEncoder().encode(message)
            );

            const encryptedMessage = arrayBufferToBase64(encrypted);
            socket.emit("send", username, encryptedMessage, sig, room_id);
        } catch (error) {
            console.error("Error during encryption or sending:", error);
        }
    }

    // Base64 to ArrayBuffer
    function str2ab(str) {
        try {
            var pemHeader = "-----BEGIN PUBLIC KEY-----";
            var pemFooter = "-----END PUBLIC KEY-----";
            str = str.replace(pemHeader, '').replace(pemFooter, '').replace(/(\r\n|\n|\r)/gm, "");

            var binaryString = window.atob(str);
            var len = binaryString.length;
            var bytes = new Uint8Array(len);
            for (var i = 0; i < len; i++) {
                bytes[i] = binaryString.charCodeAt(i);
            }
            return bytes.buffer;
        } catch (error) {
            console.error("Error converting Base64 to ArrayBuffer:", error);
            throw error;
        }
    }

    // ArrayBuffer to Base64
    function arrayBufferToBase64(buffer) {
        let binary = '';
        let bytes = new Uint8Array(buffer);
        let len = bytes.byteLength;
        for (let i = 0; i < len; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return window.btoa(binary);
    }
    
    async function decryptMessage(encryptedMessage, privateKeyBase64) {
        const privateKeyBuffer = str2ab(privateKeyBase64);

        const privateKey = await window.crypto.subtle.importKey(
            "pkcs8",
            privateKeyBuffer,
            {
                name: "RSA-OAEP",
                hash: {name: "SHA-256"},
            },
            false,
            ["decrypt"]
        );

        const encryptedMessageBuffer = str2ab(encryptedMessage);

        const decryptedMessageBuffer = await window.crypto.subtle.decrypt(
            {
                name: "RSA-OAEP",
            },
            privateKey,
            encryptedMessageBuffer
        );

        const decryptedMessage = new TextDecoder().decode(decryptedMessageBuffer);

        return decryptedMessage;
    }

    async function produce_signature(message, privateKeyBase64) {
        try {
            const privateKeyBuffer = str2ab(privateKeyBase64);

            const privateKey = await window.crypto.subtle.importKey(
                "pkcs8",
                privateKeyBuffer,
                {
                    name: "RSA-PSS",
                    hash: "SHA-256",
                },
                false,
                ["sign"]
            );

            const encoder = new TextEncoder();
            const messageBuffer = encoder.encode(message);

            const signature = await window.crypto.subtle.sign(
                {
                    name: "RSA-PSS",
                    saltLength: 32, // the length of the salt
                },
                privateKey,
                messageBuffer
            );

            return arrayBufferToBase64(signature);
        } catch (error) {
            console.error("Error generating signature:", error);
            throw error;
        }
    }

    function requestPublicKey_and_check_signature(message, signatureBase64, sender) {
        return new Promise((resolve, reject) => {
            console.log("(In requestPublicKey_and_check_signature) get_public_key emitted with ", {sender});
            socket.emit('get_public_key_for_check', sender);
            socket.once('public_key_response_for_check', async function(data) {
                if (data.error) {
                    console.error("Error getting public key:", data.error);
                    reject("Error getting public key");
                    return;
                }

                try {
                    console.log("(In requestPublicKey_and_check_signature) public key get, decrypt and comparing: ", {message, signatureBase64, publicKey:data.public_key});

                    const publicKeyBuffer = str2ab(data.public_key);
                    const publicKey = await window.crypto.subtle.importKey(
                        "spki",
                        publicKeyBuffer,
                        {
                            name: "RSA-PSS",
                            hash: "SHA-256",
                        },
                        false,
                        ["verify"]
                    );
                    const signatureBuffer = str2ab(signatureBase64);
                    const encoder = new TextEncoder();
                    const messageBuffer = encoder.encode(message);

                    const isValid = await window.crypto.subtle.verify(
                        {
                            name: "RSA-PSS",
                            saltLength: 32,
                        },
                        publicKey,
                        signatureBuffer,
                        messageBuffer
                    );

                    console.log("(In requestPublicKey_and_check_signature) the comparing result is ",{isValid});
                    resolve(isValid);
                } catch (error) {
                    console.error("Error verifying signature:", error);
                    reject(error);
                }
            });
        });
    }

    function getPrivateKey(username) {
        return new Promise((resolve, reject) => {
            if (Cookies.get("privateKey")) {
                let privateKey = Cookies.get("privateKey");
                console.log("(getPrivateKey) get private key from cookie: ",{username, privateKey});
                resolve(privateKey);
            } else {
                socket.emit('get_private_key', username);

                socket.once('private_key_response', function(data) {
                    console.log("(getPrivateKey) Private key response received:", {username, privateKey:data.private_key});

                    if (data.error) {
                        console.error("Error getting private key:", data.error);
                        reject(data.error);
                        return;
                    }

                    let password = Cookies.get("password");
                    //console.log("(in get private key) get password: ", password);

                    decryptPrivateKey(data.private_key, password, username).then(privateKey => {
                        //console.log("get private key: ", privateKey);
                        Cookies.set("privateKey", privateKey);
                        resolve(privateKey);
                    }).catch(error => {
                        console.error("get private key failed:", error);
                        reject(error);
                    });
                });
            }
        });
    }

    async function decryptPrivateKey(encryptedPrivateKeyBase64, password, username) {
        try{
            //console.log("(decryptPrivateKey) Starting decryption process"); //d

            const encryptedPrivateKey = Uint8Array.from(atob(encryptedPrivateKeyBase64), c => c.charCodeAt(0));
            //console.log("(decryptPrivateKey) Encrypted private key as Uint8Array:", encryptedPrivateKey); //d

            const keyMaterial = await crypto.subtle.importKey(
                "raw",
                new TextEncoder().encode(password),
                { name: "PBKDF2" },
                false,
                ["deriveKey"]
            );

            const key = await crypto.subtle.deriveKey(
                {
                    name: "PBKDF2",
                    salt: new TextEncoder().encode(username),
                    iterations: 100000,
                    hash: "SHA-256"
                },
                keyMaterial,
                { name: "AES-GCM", length: 256 },
                true,
                ["encrypt", "decrypt"]
            );
            //console.log("(decryptPrivateKey) Derived key:", key);

            const iv = new Uint8Array(12);
            //console.log("(decryptPrivateKey) IV: ", iv);

            const decryptedPrivateKey = await crypto.subtle.decrypt(
                {
                    name: "AES-GCM",
                    iv: iv,
                },
                key,
                encryptedPrivateKey
            );
            //console.log("Decryption complete");

            const privateKey = new TextDecoder().decode(new Uint8Array(decryptedPrivateKey));
            //console.log("(decryptPrivateKey) Decrypted private key:", privateKey); //d

            return privateKey;
        } catch (error) {
            console.error("Decryption failed:", error);
        }   
    }

    function sendMessageForSave(sender, message, color){
        receiver = Cookies.get("receiver");
        console.log("(In sendMessageForSave) save_message emitted: ", {message, username, receiver, sender, color});
        socket.emit('save_message', message, username, receiver, sender, color);
    }

    function requestOwnPublickeyAndSave(sender, message, color){
        if (Cookies.get("publickey")){
            pubKey = Cookies.get("publickey");
            console.log("(In requestOwnPublickeyAndEncrypt) Get public key from cookie: ", pubKey)
            encryptAndSave(sender, message, color, pubKey);
        } else {
            socket.emit('get_public_key_for_save', username);

            socket.once('public_key_response_for_save', function(data) {
                console.log("(In requestOwnPublickeyAndEncryptForSave) Public key response received:", data); //d

                if (data.error) {
                    console.error("Error getting public key:", data.error);
                    return;
                }

                Cookies.set("publicKey", data.public_key)
                encryptAndSave(sender, message, color, data.public_key);
            });
        }
    }

    async function encryptAndSave(sender, message, color, publicKeyStr){
        try {
            const publicKey = await window.crypto.subtle.importKey(
                "spki",
                str2ab(publicKeyStr),
                {
                    name: "RSA-OAEP",
                    hash: {name: "SHA-256"},
                },
                true,
                ["encrypt"]
            );

            const encrypted = await window.crypto.subtle.encrypt(
                {
                    name: "RSA-OAEP",
                },
                publicKey,
                new TextEncoder().encode(message)
            );

            const encryptedMessage = arrayBufferToBase64(encrypted);
            sendMessageForSave(sender, encryptedMessage, color);
        } catch (error) {
            console.error("Error during encryption or sending:", error);
        }
    }

    function load_old_message(user, message, color, encrypted) {
        console.log("(In load_old_message) Received: ", {user, message, color, encrypted}); //d
        getPrivateKey(username)
        .then(priKeyBase64 => {
            console.log("(In load_old_message) private key get, use it to decrypt message: ", {priKeyBase64});
            return decryptMessage(message, priKeyBase64);
        })
        .then(decryptedMessage => {
            let text;
            let msgColor = color;
            text = `${user}: ${decryptedMessage}`;
            let box = $("#message_box");
            let child = $(`<p style="color:${msgColor}; margin: 0px;"></p>`).text(text);
            box.append(child);
        });
    }

</script>
{% endblock %}
