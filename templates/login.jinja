<!-- 
    Login page, user is redirected here when the user clicks on Login.
-->

{% extends 'base.jinja' %}

{% block content %} 
    <h1>Login</h1>
    <p>Username</p>
    <input id="username"/>
    <p>Password</p>
    <input id="password"  type="password"/>
    <button onclick="login()">Login</button>

    <script src="/static/js/libs/socket.io.min.js"></script>
    <script>

        const socket = io();

        // basically checks if the server returns an Error message instead of a URL
        // this is a pretty terrible way of handling error generated by the server, but it works...
        function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }

        // login function to well login...
        async function login() {
            // this fancy syntax is part of the Jinja syntax
            // login_user is a Python function, this gets the URL that calls that Python function
            // you know the one with the:
            // app.route("/login/user", methods=["POST"])
            // login_user()
            // so... "{{ url_for('login_user')}}" 
            // gives us -> "http://blabla/login/user"
            let loginURL = "{{ url_for('login_user') }}";
            let username = $("#username").val();
            let password = $("#password").val();

            try {
                // hash the password
                let hashedPassword = await requestSaltAndHash(username, password);
                console.log("(In login) post username and hashedPassword: ", {username, hashedPassword});

                // axios post is a fancy way of posting a request to the server,
                // we pass in the username and password here
                let res = await axios.post(loginURL, {
                    username,
                    password: hashedPassword
                });

                let token = res.data.token;
                let url = res.data.url;

                // if the server sends in an error message, alert() the error message
                if (!isValidURL(url)) {
                    alert(res.data);
                    return;
                }

                Cookies.set("token", token);
                Cookies.set("password", password);

                // redirects to the URL (ie. res.data),
                // we use _self here since we all hate that moment
                // when the browser opens a new tab
                window.open(url, "_self");
            } catch (error) {
                console.log("(In login) Error requestSaltAndHash: ", error);
            }
        }

        function requestSaltAndHash(username, password) {
            console.log("(In requestSaltAndHash) get_salt emitted with ", username)
            socket.emit('get_salt', username);

            return new Promise((resolve, reject) => {
                socket.once('salt_response', function(data) {
                    console.log("(In requestSaltAndHash) salt response received:", data);

                    if (data.error) {
                        console.log("Error getting public key:", data.error);
                        alert("Error: User does not exist!");
                        reject(data.error); // reject Promise when error
                        return;
                    }

                    const salt = data.salt;
                    const hashedPassword = CryptoJS.SHA256(password + salt).toString(CryptoJS.enc.Hex);
                    resolve(hashedPassword);
                });
            });
        }
    </script>
{% endblock %}